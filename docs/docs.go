// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-07-23 16:27:17.849939 -0300 -03 m=+3.766900265

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health_check": {
            "get": {
                "description": "Ping API for 200-OK response.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "health checks"
                ],
                "summary": "Check API health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/servers/summary": {
            "get": {
                "description": "Get summary info concerning a server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "servers"
                ],
                "summary": "Get server info",
                "parameters": [
                    {
                        "description": "server hostname",
                        "name": "hostname",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/servers.HostName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/servers.SummaryInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body. Body should have a property called ` + "`" + `hostname` + "`" + ` of type string.",
                        "schema": {
                            "$ref": "#/definitions/errors.RestErr"
                        }
                    },
                    "404": {
                        "description": "No server with hostname: ` + "`" + `hostname` + "`" + `.",
                        "schema": {
                            "$ref": "#/definitions/errors.RestErr"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.RestErr": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "servers.BaseSummaryInfo": {
            "type": "object",
            "properties": {
                "average": {
                    "type": "number"
                },
                "median": {
                    "type": "number"
                },
                "mode": {
                    "type": "number"
                },
                "unit": {
                    "type": "string"
                }
            }
        },
        "servers.HostName": {
            "type": "string"
        },
        "servers.SummaryInfo": {
            "type": "object",
            "properties": {
                "cpu_load": {
                    "type": "object",
                    "$ref": "#/definitions/servers.BaseSummaryInfo"
                },
                "disk_usage": {
                    "type": "object",
                    "$ref": "#/definitions/servers.BaseSummaryInfo"
                },
                "hostname": {
                    "type": "string"
                },
                "memory_usage": {
                    "type": "object",
                    "$ref": "#/definitions/servers.BaseSummaryInfo"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
